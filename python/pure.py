CGI сервер.

	В Python уже есть встроенный CGI сервер.

	CGI-скрипты - это исполняемые файлы, которые выполняются веб-сервером, когда в URL запрашивается соответствующий скрипт.

	python -m http.server --cgi - запуск cgi сервера, теперь у нас есть доступ к директории по адресу localhost:8000

	в корневой директории создаём папку cgi-bin

	в папке cgi-bin создаём python файл

	в python файл пишем это:

		#!/usr/bin/env python3 (данная строка говорит о том, что это python скрипт)

		print("Content-type: text/html") - обязательные заголовки для браузера, которые сообщают ему, что это html файл

		print() - строка переноса, которая отделяет заголовки от тела ответа. Если не поставить то не будет видно тело ответа

		Дальше любой код на python

	переходим по адресу http://localhost:8000/cgi-bin/name_file.python и должен сработать наш скрипт

Работа с формой.

	Для работы с полями формы есть класс form = cgi.FieldStorage()

	В этом классе есть метод form.getfirst('field_name'), который берёт значение заданного поля формы

	Принимая значение из формы для безопастности нужно экранировать символы. Это можно сделать с помощью html.escape('field_name')

Cookies.
	
	Cookies (печеньки) — небольшой фрагмент данных, отправленный веб-сервером и сохраняемый на компьютере пользователя. Браузер всякий раз при попытке открыть страницу соответствующего сайта пересылает этот фрагмент данных веб-серверу в составе HTTP-запроса.

	Доступность Cookies через JavaScript зависит от способа их усановки. Если при создании Cookies была указана опция httponly, то они будут не доступны.

	Cookies передаются на сервер и доступны в переменной os.environ. Это словарь и cookies хранятся по ключу HTTP_COOKIE.

	cookie = http.cookies.SimpleCookie(os.environ.get('HTTP_COOKIE'))
	name = cookies.get('cookie_name')
	name.value

	Не следует хранить в cookies важные данные, и не полагайтесь на выставленный вами срок хранения. Cookies можно удалить или изменить вручную в браузере.

	К примеру, если вход на сайт осуществляется при помощи куки, то, после ввода пользователем своих данных на странице входа, куки позволяют серверу запомнить, что пользователь уже идентифицирован и ему разрешён доступ к соответствующим услугам и операциям. Помимо этого куки используются для хранения персональных предпочтений и настроек пользователя, ведения статистики о пользователях.

	Защищенные куки могут быть переданы только через шифрованное соединение (то есть HTTPS). Они не могут передаваться по незащищенным соединениям. Чтобы защитить куки, необходимо добавить флаг Secure в файл куки.

	К файлу HttpOnly-куки нельзя обращаться с помощью API на стороне клиента, таких как JavaScript. Это ограничение устраняет угрозу кражи куки с помощью кросс-сайтового скриптинга (XSS). Тем не менее, куки остается уязвимым для кросс-сайтовой трассировки (XST) и кросс-сайтовых поддельных запросов (XSRF).

Сессии.

	В официальной документации написано, что лучше использовать wsgi. В этом инструменте есть встроенные механизмы для работы с сессиями.

Чистые запросы.

	Для работы с postgresql используется пакет Psycopg. (pip install psycopg2)

	Взаимодействие происходит по следующей схеме: соединение -> курсор -> запрос -> коммит/откат -> закрытие курсора и соединениям

	conn = psycopg2.connect(dbname='pure', user='postgres', password='asdf')
	cursor = conn.cursor()

	cursor.execute("SELECT name FROM users")
	row = cursor.fetchone()

	cursor.execute("SELECT name FROM users")
	conn.commit()
	
	cursor.close()
	conn.close()
