Каждый программист может разрабатывать свою группу объектов. Разработчикам достаточно договориться между собой только о том, как объекты будут взаимодействовать между собой, то есть об их интерфейсах. Пете не надо знать, как Вася реализует рост коровы в результате поедания травы. Ему, как разработчику лужайки, достаточно знать, что когда корова прикасается к траве, последней на лужайке должно стать меньше.

Ключевую разницу между программой, написанной с структурном стиле, и объектно-ориентированной программой можно выразить так. В первом случае, на первый план выходит логика, понимание последовательности выполнения действий для достижения поставленной цели. Во-втором – важнее представить программу как систему взаимодействующих объектов.

Основными понятиями, используемыми в ООП, являются класс, объект, наследование, инкапсуляция и полиморфизм. В языке Python класс равносилен понятию тип данных.

Класс столов дает общую характеристику всем столам в мире, он их обобщает.

В языке программирования Python объекты принято называть также экземплярами. Это связано с тем, что в нем все классы сами являются объектами класса type. Точно также как все модули являются объектами класса module. Поэтому во избежании путаницы объекты, созданные на основе обычных классов, называют экземплярами.

Переменные часто называют полями или свойствами. Функции называются методами. Методом в классе B является adder. Количество свойств и методов в классе может быть любым.

Класс создает объекты, которые в определенном смысле являются его наследниками. Это значит, что если у объекта нет собственного поля n, то интерпретатор ищет его уровнем выше, то есть в классе. Таким образом, если мы присваиваем объекту поле с таким же именем как в классе, то оно перекрывает, т.е. переопределяет, поле класса:

	class B:
		n = 5

	l = B()
	l.n = 10

	Теперь n в объекте l равно 10, но в классе B, n по-прежнему равно 5. А если написать так B.n = 10, то значение измениться в самом классе.

В Python объекту можно не только переопределять поля и методы, унаследованные от класса, также можно добавить новые, которых нет в классе:

	l.test = "hi"

	Однако в программировании так делать не принято, потому что тогда объекты одного класса будут отличаться между собой по набору атрибутов. Это затруднит автоматизацию их обработки, внесет в программу хаос.

	Поэтому принято присваивать полям, а также получать их значения, путем вызова методов:

		class User:
			def set_name(self, name):
				self.name = name

			def get_name(self):
				return self.name

		user = User()
		user.set_name('Ilya')
		user_name = user.get_name()
		print(user_name)

		Подобные методы в простонародье называют сеттерами (set – установить) и геттерами (get – получить).

