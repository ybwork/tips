# Используйте 4 пробела на каждый уровень отступа. Python 3 запрещает смешивание табуляции и пробелов в отступах.

# Выровнено по открывающему разделителю
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)

# Закрывающие круглые/квадратные/фигурные скобки в многострочных конструкциях могут находиться под первым непробельным символом или под первым символом строки, начинающей многострочную конструкцию
my_list = [
    1, 2, 3,
    4, 5, 6,
    ]

my_list = [
    1, 2, 3,
    4, 5, 6,
]

# Стандартная библиотека Python консервативна и требует ограничения длины строки в 79 символов (а строк документации/комментариев в 72)

# Определения методов внутри класса разделяются одной пустой строкой

# Используйте пустые строки в функциях, чтобы указать логические разделы

# Кодировка Python должна быть UTF-8 (ASCII в Python 2)

# Каждый импорт, как правило, должен быть на отдельной строке
import os
import sys
from subprocess import Popen, PIPE

# Импорты всегда помещаются в начале файла, сразу после комментариев к модулю и строк документации, и перед объявлением констант

'''
    Импорты должны быть сгруппированы в следующем порядке:

        импорты из стандартной библиотеки

        импорты сторонних библиотек

        импорты модулей текущего проекта

    Рекомендуется абсолютное импортирование

    Тем не менее, явный относительный импорт является приемлемой альтернативой абсолютному импорту, особенно при работе со сложными пакетами, где использование абсолютного импорта было бы излишне подробным
'''

# не использовать пробелы внутри круглых, квадратных или фигурных скобок, перед запятой, точкой с запятой или двоеточием
spam( ham[ 1 ], { eggs: 2 } )
if x == 4 :

# использовать один пробел вокруг оператора присваивания или любого другого
x = 1

# использовать одну команду в одной строке
if foo == 'blah':
    do_one()
    do_two()
    do_three()

# Всегда исправляйте комментарии, если меняете код!

# Если комментарий — фраза или предложение, первое слово должно быть написано с большой буквы, если только это не имя переменной, которая начинается с маленькой буквы

# Старайтесь реже использовать встрочные комментарии

# Комментарий нужно писать после строки с def. Для однострочной документации можно оставить закрывающие кавычки на той же строке.

# Если вам нужно использовать Subversion, CVS или RCS в ваших исходных кодах, делайте вот так
__version__ = "$Revision: 1a40d4eaa00b $"

# Модули должны иметь короткие имена, состоящие из маленьких букв. Можно использовать символы подчеркивания, если это улучшает читабельность. То же самое относится и к именам пакетов, однако в именах пакетов не рекомендуется использовать символ подчёркивания.

# Имена классов должны обычно следовать соглашению CapWords.

# Имена переменных фунций в underscore

# Имена констант в underscore и в верхнем регистре
MAX_OVERFLOW

# Если вы сомневаетесь, выберите непубличный атрибут. Потом будет проще сделать его публичным, чем наоборот. Мы не используем термин "приватный атрибут", потому что на самом деле в python таких не бывает.

# Сравнения с None должны обязательно выполняться с использованием операторов is или is not, а не с помощью операторов сравнения

# Всегда используйте выражение def, а не присваивание лямбда-выражения к имени
def f(x): return 2*x

# Неправильно:
f = lambda x: 2 * x

# Когда вы генерируете исключение, пишите raise ValueError('message') вместо старого синтаксиса raise ValueError, message.

# Когда код перехватывает исключения, перехватывайте конкретные ошибки вместо простого выражения except
try:
    import platform_specific_module
except ImportError:
    platform_specific_module = None

'''
    Если вы действительно собираетесь перехватить все исключения, пишите "except Exception:"

    Хорошим правилом является ограничение использования "except:", кроме двух случаев:

        Если обработчик выводит пользователю всё о случившейся ошибке; по крайней мере, пользователь будет знать, что произошла ошибка.
    
        Если нужно выполнить некоторый код после перехвата исключения, а потом вновь "бросить" его для обработки где-то в другом месте. Обычно же лучше пользоваться конструкцией "try...finally".

    Постарайтесь заключать в каждую конструкцию try...except минимум кода, чтобы легче отлавливать ошибки. Опять же, это позволяет избежать замаскированных ошибок.
'''

# При связывании перехваченных исключений с именем, предпочитайте явный синтаксис привязки
except Exception as exc:

# Менеджеры контекста следует вызывать с помощью отдельной функции или метода, всякий раз, когда они делают что-то другое, чем получение и освобождение ресурсов.
with conn.begin_transaction():
    do_stuff_in_transaction(conn)
# Неправильно
with conn:
    do_stuff_in_transaction(conn)

# Используйте строковые методы вместо модуля string — они всегда быстрее и имеют тот же API для unicode-строк.

# Пользуйтесь ''.startswith() и ''.endswith() вместо обработки срезов строк для проверки суффиксов или префиксов. startswith() и endswith() выглядят чище и порождают меньше ошибок. 

# Сравнение типов объектов нужно делать с помощью isinstance(), а не прямым сравнением типов
if isinstance(obj, int):

# Не сравнивайте логические типы с True и False с помощью равенства (if greeting == True) - неправильно

'''
    Документирование кода
'''

    # Такая строка документации становится специальным атрибутом __doc__ этого объекта.

    # Все модули должны, как правило, иметь строки документации, и все функции и классы, экспортируемые модулем также должны иметь строки документации. Публичные методы (в том числе __init__) также должны иметь строки документации. Пакет модулей может быть документирован в __init__.py.

    # Для согласованности, всегда используйте """triple double quotes""" для строк документации

    # Используйте тройные кавычки, даже если документация умещается на одной строке. Закрывающие кавычки на той же строке. Это смотрится лучше.

    # Однострочная строка документации не должна быть "подписью" параметров функции 
        def function(a, b):
        """function(a, b) -> list"""

        # Предпочтительный вариант для такой строки документации будет что-то вроде:

            def function(a, b):
                """Do X and return a list."""

    # Многострочные комментарии

        def complex(real=0.0, imag=0.0):
        """Form a complex number.

        Keyword arguments:
        real -- the real part (default 0.0)
        imag -- the imaginary part (default 0.0)

        """
        if imag == 0.0 and real == 0.0: return complex_zero

