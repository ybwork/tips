<?php

/*
    Выбор инструментов (фреймворк, база и т.д.)

        Паттерны для работы с базой данных:

            - ActiveRecord (используется в Doctrine 1)

            - DataMapper (используется в Doctrine 2)

            - Table Data Gateway (похож на datamapper, но может быть реализован без объектов, то есть возвращаются данные, а не объект и для работы с сущностями используется один и тот же класс)

            - Query builder
*/

/*
    Создание схемы работы (рисуем)

    Здесь должны быть все возможные этапы и поля для каждой формы, если таковая есть на этапе.
*/

/*
    Проектирование базы данных

        - Проектируем на основе схемы, составленной на предыдущем этапе

        - Foreign key

        - indexes

        - views
*/

/*
    Выбор архитектуры приложения
    
        - SOLID

        - GoF (банда четырёх)

        - GRASP (не изученно)

        - MVC

        - MVP (Model-View-Presenter)

            Шаблон проектирования, производный от MVC, который используется в основном для построения пользовательского интерфейса. 

            Элемент Presenter в данном шаблоне берёт на себя функциональность посредника (аналогично контроллеру в MVC) и отвечает за управление событиями пользовательского интерфейса.

            Модель — хранит в себе всю бизнес-логику, при необходимости получает данные из хранилища.

            Вид — реализует отображение данных и обращается к Presenter за обновлениями.

            Представитель — реализует взаимодействие между моделью и представлением.

        - MVVM (Model-View-View-Model)

        ...Причина в сильной связанности многих классов, в их связях и зависимостях. Отдельные классы должны быть максимально изолированы друг от друга, быть по возможности независимыми друг от друга.

        ...Клиент не должен вынужденно зависеть от элементов интерфейса, которые он не использует. Иными словами, зависимость между классами должна быть ограничена как можно более узким интерфейсом. 
*/

/*
    Проектирование приложения (имена контроллеров, моделей, роутов и т.д.)

        - Авторизация 

        - Валидация

        - Комментарии

            - Почему так написано? Написано так, потому что...

            - @param datatype overview предназначен для описания входящих параметров функции.

            - @return datatype1|datatype2 overview предназначен для описания значения, которое возвращает функция.

        - Логирование

            В laravel готово, нужно только настроить

            Для расширенного можно использовать триггеры

        - Кэширование (если нужно)

            В laravel готово, нужно только настроить

        - Отдельный api (либо возращать везде json и status code)

        - Переменные

            Лучше использовать пояснительные переменные

        - Функции

           Передавать в функцию аргументы в виде переменных, а не волшебные числа и строки - show(1, 'John');

           Функция должна выполнять одну операцию. Пример неправильной функции:
                
                public void pay()
                {
                    for (Employe $e as $employes) {
                        if (e.isPayDay()) {
                            Money pay = e.calculatePay();
                            e.deliverPay(pay);
                        }
                    }
                }

            Эта функция выполняет сразу три операции: перебирает всех работников, проверяет начисленны ли работнику какие-то выплаты и наконец производит оплату. Поэтому её лучше разбить на 3 отдельных.
*/

// Примеры и правила комментирования:

/**
 * Run in metres
 *
 * @param  string|null $guard overview (если тип параметра задан по умолчанию, но может быть и другой тип)
 *
 * @param string $argument1 Description for argument 1.
 *
 * @param Request $request (если внедрение зависимостей)
 *
 * @return object|array (если несколько вариантов ответа, ошибки не считаются)
 *
 * @return void
 *
 * @return mixed
 */

/*
    Общее:

        - папки (htmt-css)

        - картинки (product-1)

    Python:

        - имена методов-функций create_user()

        - имена классов UserView

        - имена файлов модулей стоит делать короткими и лучше называть одним словом (sys.py)

    PHP:

        - простые php файлы (autoload_register.php)

        - php файлы классов (ProductController.php)

        - имена таблиц (users_categories)

        - имена переменных ($usersWithoutIndications)

        - имена функций (public function getUsersWithoutIndications())

        - имена столбцов в базе данных (model_car)

        - имена view (confirm_email.php)
*/