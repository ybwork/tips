/*
	Создание проекта.

	file -> new -> new project

	Задаём название и выбираем empty activity. (всё остальное по умолчанию)
*/

/*
	Структура.

	app > java > com.example.nameapp > MainActivity.java - точка входа приложения

	app > res > layout > activity_main.xml - xml вид activity

	app > manifests > AndroidManifest.xml - писывает основные характеристики приложения (файл конфигурации)

	Gradle Scripts > build.gradle - инструменты Gradle собирают и создают ваше приложение (один для проекта и по одному для модуля «приложения)
*/

/*
	Настройка рабочего окружения.

	Открыть app > res > layout > activity_main.xml

	Выбрать View > Tool Windows > Project

	Выбрать Design в нижней части панели.

	Выбрать bluprint в панели чуть ниже вкладок с открытыми файлами.

	Включить Turn On Autoconnect (подкова возле глаза).

	Выставить Default Margins в 16 (справа от подковы).

	Выбрать модель телефона для разработки (выше Default Margins) 

	Component Three -> ConstraitLayout (нажать правой кнопкой мыши) -> Constrait Layout -> Infer Contraints или выбрать Turn on AutoConnect
*/

/*
	Позиционирование.

	widgets (View objects) - компоненты пользовательского интерфейса (кнопки, чекбоксы).

	layouts (ViewGroup objects) - невидимые контейнеры, они определяют, как их дочерние представления располагаются на экране.

	Component Tree - окно в программе, которое показывает иерархию представлений макета.

	ConstraintLayout - общий контейнер, который находится внутри окна Component Tree. В нём могут лежать другие контейнер/контейнеры (определение придуманное мной на основе описанного в документации). Например выставим ConstraintLayout 16dp. Внутри этого контейнера лежит 2 других контейнера (контейнер а и контейнер б). Теперь контейнер а будет отсупать от верха на 16dp и от ConstraintLayout слева на 16dp, в свою очеред контейнер б будет отсупать от контейнера а на 16dp и от верха на 16dp.

	В меню pallete, которое ниже вкладок с открытыми файлами можно выбрать нужный виджет (представление).

	При клике на виджет вокру него появляется рамка с кругляшками по периметру. Нажимаем на кругляшок и тянем к нужной стороне, должна появиться стрелка с хвостом. Когда притянули куда нужно, отпускаем - установка якоря относительно ConstraintLayout.

	При клике на виджет ниже него появляются 2 иконки. Нажимаем на правую и видим в центре виджета появилась полоска. Зажимаем правой кнопкой полоску и тянем к нужному элементу, должна появиться стрелка с хвостом. Когда притянули куда нужно, отпускаем - горизонтальное выравнивание.

	Выбрали один виджет, зажали Shift и выбрали остальные, затем нажали правую кнопку мыши и выбрали center horizontaly. (выравнивание по горизонтали)

	Для редактирование отступов используем панель справа, должна выезжать при нажатии на виджет.

	Чтобы поместить один виджет по центру нужно взять его и перетащить к верхнему краю
*/

/*
	Работа с текстом.

	app > res > values > strings.xml - файл для с текстом для всех пользовательских представлений приложения.

	В правом углу окна нажали open editor, во вкладках файла открылось Translations Editor.
	
	Найти и нажать зелёный плюс, откроется окно, где можно задать ключ и текст, а потом связать поле по ключу и у этого поля появиться заданный текст. (edit_message - ключ, Enter a messabe - текст, app/src/main/res - место хранения)

	Для привязки текста к полю нажимаем на нужное поле, справа должна открыться панель, если не открылась, нажать на вкладку properties. Затем находим нужное поле и нажимаем рядом с ним кнопку с тремя точками. В открывшемся окне выбираем нужный нам ключ теста.
*/

/*
	Запуск на эмуляторе.

	Установили и открыли genymotion.

	Нажали кнопку run.
*/

/*
	Работа с кодом.

	Если подсвечивает красным, ставим курсор на красный кусок кода и нажимаем alt + enter или красную лампочку.
*/

/*
	Работа с виджетами (представлениями).

	Для того чтобы повесить на виджет событие onClick, нужно открыть activity_main.xml, выбрать нужный виджет (например кнопку), найти в панели справа поле onClick и выбрать в селекте нужную функцию, которая отработает по клику. При этом функция должна иметь публичный доступ, возвращать занчение void, иметь единственный входной параметр View.
*/

/*
	Работа с activity.

	В левой панели на папке app кликаем правой кнопкой, выбираем new -> activity -> empty activity. В открывшемся окне задаём имя activity, например DisplayMessageActivity.

	Для передачи данных и связи одного activity с другим нужно использовать класс Intent. Он может переносить данные в виде ключ -> значение и это хорошая практика.

	Для создания стрелки назад в хэдере приложения нужно открыть app > manifests > AndroidManifest.xml и внутрь тега activity DisplayMessageActivity вставить код и добавить мета тэг. Всё вместе:
        <activity android:name=".DisplayMessageActivity"
            android:parentActivityName=".MainActivity">
            <meta-data
                android:name="android.support.PARENT_ACTIVITY"
                android:value=".MainActivity"/>
        </activity>
*/

/*
	Локализация.

	Хорошей практикой является сохранение файлов локализации отдельно от приложения.

	Для создания локализации используется макет интерфейса RTL UI layout.

	Локализация создаётся в папке res. 

	Создаём русурсную директорию. res > new > android resource directory в формате resource_type-b+short_code_lang+short_code_country (values-b+es, mipmap-b+es+ES)

	values-b+es - содержит строковые ресурсы для локалей с кодом языка

	Создаём русурсный файл. values-b+es > new > name resource file

	Создаём mipmap директорию. res > new > android resource directory > в открывшемся окне > resource type > mipmap

	mipmap-b+es+ES - содержит значки для локалей

	Добавлем в string.xml текст на разных языках (см. Работа с текстом)
*/

/*
	Работа с фрагментами.

	Объединить два отдельных экрана из смартфона в один экран на планшете. Это самый классический пример применения фрагмента.

	Чтобы создать динамический и многоуровневый пользовательский интерфейс нужно инкапсулировать активити в модули. (Нарпмер в рамках одного activity сложили 2 числа и ниже динамически выводится результат)

	Есть два варианта использования фрагментов в приложении (при желании можно использовать сразу оба варианта). Первый вариант заключается в том, что вы в разметке сразу указываете фрагмент с помощью тега fragment, так же как и с другими компонентами. Второй вариант использует динамическое подключение фрагмента. Принцип следующий - в разметку помещается макет из группы ViewGroup, который становится контейнером для фрагмента. Обычно, для этой цели используют FrameLayout, но это не обязательное условие. И в нужный момент фрагмент замещает контейнер и становится частью разметки.

	Фрагмент, как и активность, состоит из разметки и класса.

	Можно представить фрагмент, как модуль активити.

	v4 appcompat - библиотека для Android начиная с версии 1.6 (класс activity должен расширять AppCompatActivity)

	v7 appcompat - библиотека для Android начиная с версии 2.1

	Создание файла фрагмента. Правой кнопкой мыши на папке res/layout > new > layout resource file.

	Создание класса фрагмента. new > java class
*/
