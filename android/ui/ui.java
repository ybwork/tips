/*
	Настройка и подключение.

	Существует два способа объявить макет:
		- Объявление элементов пользовательского интерфейса в XML

		- Создание экземпляров элементов во время выполнения

	В каждом файле макета должен быть всего один корневой элемент, в качестве которого должен выступать объект представления (View) или представления группы (ViewGroup).

	Расположение:

		app -> res -> layout -> filename.xml

	В отличие от исходников на Java, в ресурсах не предусмотрено вложенности директорий, поэтому все файлы лежат в одной директории и чтобы не запутаться в них, когда их много, приняты следующие названия:

		- activity_name.xml — для Activity

		- fragment_name.xml — для фрагментов

		- view_name.xml — для View

	Загрузка в активити:
		в методе onCreate() пишем это: setContentView(R.layout.main_layout);
*/

/*
	Общее.

	Два самых важных понятия в интерфейсе Android — это Activity, View, ViewGroup, Layout.

		Activity — это та часть приложения, с которой взаимодействует пользователь.

		View — элемент интерфейса.

		ViewGrop — это модифицированный View, созданный для того, чтобы служить контейнером для других View.

		Layout — общее название для нескольких наследников ViewGroup. Лэйауты служат контейнерами для View, и созданы они для того, чтобы мы могли удобно располагать всяческие кнопочки, поля для ввода текста и прочие элементы интерфейса.

		Пример: 

			поле для ввода и 2 кнопки - View

			2 кнопки объединены зелёной рамкой (схематично) - ViewGroup

			рамка вокрук поля ввода и двух кнопок - другое ViewGroup

	

	Все группы представлений включают в себя параметры ширины и высоты (layout_width и layout_height), и каждое представление должно определять их.
*/

/*
	View.

	У любого объекта View может быть связанный с ним целочисленный идентификатор, который служит для обозначения уникальности объекта View в иерархии. 
	Пример: <Button android:id="@+id/my_button" />	
*/

	
/*
	Ширина и высота.

		- android:layout_width="match_parent"

		- android:layout_height="match_parent"

	Для задания значений ширины и высоты используется одна из следующих констант:

		- match_parent (элемент будет занимать все доступное ему пространство)

		- wrap_content (элемент будет использовать столько места, сколько требуется для отображения контента внутри. Кнопка, например, будет иметь размер текста + отступы.)

		Как правило, не рекомендуется задавать абсолютные значения ширины и высоты макета (например, в пикселах).
		
			- dp - единица измерения не зависящая от разрешения экрана

	Представление имеет прямоугольную форму. Расположение представления определяется его координатами слева и сверху, а его размеры — параметрами ширины и высоты.

	Расположение представления можно получить путем вызова методов:

		- getLeft()

		- getTop()

		- getRight()

		- getBottom()

	Оба этих метода возвращают расположение представления относительно его родительского элемента.

	Размер представления выражается его шириной и высотой. Виды:

		- измеренная ширина и измеренная высота (размер представления в границах своего родительского элемента)

			Получить:

				- getMeasuredWidth()

				- getMeasuredHeight()

		- просто ширина и высота (определяют фактический размер представления на экране после разметки во время их отрисовки)

			Получить:

				- getWidth()

				- getHeight()
*/

/*
	Макеты.

	Один макет может содержать один или несколько вложенных макетов, рекомендуется использовать как можно более простую иерархию макетов. Чем проще эта структура, тем лучше для производительности.

	Наиболее часто используемые:

		- LinearLayout (макет, в котором дочерние элементы представлены в горизонтальных или вертикальных столбцах. Если длина окна больше длины экрана, в нем создается полоса прокрутки.)

		- RelativeLayout (в этом макете можно задавать расположение дочерних объектов относительно друг друга)

		- WebView (отображает веб страницы)

		- FrameLayout

	Если содержимое макета является динамическим или не определено заранее, можно использовать макет, который создает подклассы класса AdapterView для заполнения макета представлениями во время выполнения.

	Виды адаптер макетов:

		- List View (отображение списка в один столбец с возможностью прокрутки)

		- Grid View (отображение сетки из столбцов и строк с возможностью прокрутки)

	В Android предусмотрено несколько подклассов адаптера Adapter, которые полезно использовать для извлечения данных различных видов и создания представлений для AdapterView. Вот два наиболее часто используемых адаптера:

		- ArrayAdapter (этот адаптер используется в случае, когда в качестве источника данных выступает массив)

		- SimpleCursorAdapter (этот адаптер используется в случае, когда в качестве источника данных выступает объект Cursor)
*/

/*
	LinearLayout.

	Располагает дочерние элементы в «линейном» порядке, т.е. друг за другом. Линейный лэйаут может быть горизонтальным или вертикальным.

	<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	    android:layout_width="match_parent"
	    android:layout_height="match_parent"
	    android:orientation="horizontal">

	    <Button
	        android:layout_width="0dp"
	        android:layout_height="wrap_content"
	        android:layout_weight="1"
	        android:text="Button 1"/>

	    <Button
	        android:layout_width="0dp"
	        android:layout_height="wrap_content"
	        android:layout_weight="1"
	        android:text="Button 2" />

	    <Button
	        android:layout_width="0dp"
	        android:layout_height="wrap_content"
	        android:layout_weight="2"
	        android:text="Button 3" />
	</LinearLayout>
*/

/*
	FrameLayout.

	Располагает элементы друг над другом.

	<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
		android:layout_width="match_parent"
		android:layout_height="match_parent">
		
		<View 
			android:layout_width="300dp"
			android:layout_height="300dp"
			android:background="#ff0000"
			android:textSize="20sp" />
	</FrameLayout>
*/

/*
	Атрибуты.

	android:orientation="horizontal" - горизонтальное направление контента в лэйауте

	android:orientation="vertical" - вертикальное направление» контента в лэйауте

	android:layout_weight - сколько пространства должен занимать элемент. В качестве значения можно использовать любое число. Например, если мы хотим равномерно распределить пространство между двумя кнопками, мы можем задать обеим кнопкам layout_weight = 1. Тогда они разделят имеющееся пространство на две равных части. Если мы зададим одной кнопке вес = 1, а второй = 2, то вторая кнопка будет занимать в 2 раза больше места, чем первая. Также при использовании атрибута layout_weight рекомендуется заменить ширину (если лэйаут горизонтальный) или высоту (если лэйаут вертикальный) на 0dp.

	android:background="#ff0000" - задаёт цвет заднего плана

	android:textSize="20sp" - задаёт размер те

*/