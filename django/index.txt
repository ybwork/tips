- @require_http_methods(['PUT']) - декоратор, который создаёт ограничение на тип запроса

- модули должны быть подключенны в name_app_project/settings.py/INSTALLED_APPS

    'name_app.apps.NameAppConfig' ('auth.apps.AuthConfig')

- Правило Django использовать пустую строку, вместо NULL.

- email = model.CharField(max_length=255, db_index=True)

- правой кнопкой на таблице -> View/Edit Data -> All rows - вставка данных через pgAdmin

- чтобы отключить работу с сессиями нужно в MIDDLEWARE закомментировать MessageMiddleware, SessionMiddleware  и в INSTALLED_APPS закомментировать sessions, messages

- По умолчанию, Django использует алгоритм PBKDF2 с хэшем SHA256, механизм защиты паролей рекомендованный NIST. Этого должно хватить для большинства пользователей: достаточная защита, требующая большой объём вычислительного времени для взлома.

- Чтобы не было конфликтов с встроенной аутентификацией нужно оставить в INSTALLED_APPS 'django.contrib.auth' и если нужно использовать свою, то назвать её например api_auth

- чтобы не было конфликтов django и django rest нужно следующая настройка в файле setting.py

    INSTALLED_APPS = [
        'rest_framework',

        # 'django.contrib.admin',
        # 'django.contrib.auth',

        'django.contrib.contenttypes',

        # 'django.contrib.sessions',
        # 'django.contrib.messages',

        'django.contrib.staticfiles',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',

        # 'django.contrib.sessions.middleware.SessionMiddleware',

        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',

        # 'django.contrib.auth.middleware.AuthenticationMiddleware',
        # 'django.contrib.messages.middleware.MessageMiddleware',
        # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')]
            ,
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    
                    # 'django.contrib.auth.context_processors.auth',
                    # 'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

- для того чтобы убрать слэш в конце урла нужно поставить APPEND_SLASH = False

- для внесения новых изменений для миграции нужно заново вызвать команду python manage.py makemigrations name_migration

- для сброса миграций нужно удалить их в папке migrations для каждого проекта (все файлы кроме __init__.py)

- для удаления пакета pip unistall package_name

- для работы нового кода внесённого в models.py нужно выполнить 2 команды: python manage.py makemigrations и python manage.py migrate

- для проверки типа используем isinstance(data, int)

- для преобразования из json в dictionary используем json.load(request)

- для работы валадатора создаём файл validators.py и кладём туда например такой код:

    email_validator = EmailValidator()

    def email():
        try:
            email_validator('test@gmail.com')
        except ValidationError:
            return 0

        return 1 

