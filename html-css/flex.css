/*
    Первое, что нужно сделать – это указать контейнеру display: flex или display: inline-flex

    Одним из основных понятий в fleхbox являются оси.

        Главной осью flex-контейнера является направление, в соответствии с которым располагаются все его дочерние элементы.

        Поперечной осью называется направление, перпендикулярное главной оси.

        Задаётся с помощью св-ва flex-direction:

            flex-direction: row (значение по умолчанию, слева направо)

            flex-direction: row-reverse (справа налево)

            flex-direction: column (сверху вниз)

            flex-direction: column-reverse (снизу вверх)

        Для выравнивания по оси используется justify-content:

            justify-content: flex-start (значение по умолчанию, блоки прижаты к началу главной оси)

            justify-content: flex-end (блоки прижаты к концу главной оси)

            justify-content: center (блоки располагаются в центре главной оси)

            justify-content: space-between (первый блок располагается в начале главной оси, последний блок – в конце, все остальные блоки равномерно распределены в оставшемся пространстве)

            justify-content: space-around (все блоки равномерно распределены вдоль главной оси, разделяя все свободное пространство поровну)

        Для выравнивания по поперечной оси используется align-items:

            align-items: flex-start (блоки прижаты к началу поперечной оси)

            align-items: flex-end (блоки прижаты к концу поперечной оси)

            align-items: center (блоки располагаются в центре поперечной оси)

            align-items: baseline (блоки выровнены по их baseline)

            align-items: stretch (значение по умолчанию,  блоки растянуты, занимая все доступное место по поперечной оси, при этом все же учитываются min-width/max-width, если таковые заданы)


        СSS свойства flex-direction, justify-content, align-items должны применяться непосредственно к flex-контейнеру, а не к его дочерним элементам

    По умолчанию flex-контейнер всегда будет располагать блоки внутри себя в одну линию. Однако, спецификацией также поддерживается многострочный режим. За многострочность внутри flex-контейнера отвечает CSS свойство flex-wrap:

        flex-wrap: nowrap (значение по умолчанию, блоки расположены в одну линию слева направо)

        flex-wrap: wrap (блоки расположены в несколько горизонтальных рядов (если не помещаются в один ряд). Они следуют друг за другом слева направо)

        flex-wrap: wrap-reverse (блоки расположены в несколько горизонтальных рядов (если не помещаются в один ряд). Они следуют друг за другом справа на лево)

    Для указания в одном свойстве направление главной и многострочность поперечной оси используется св-во flex-flow:

        flex-flow: <‘flex-direction’> || <‘flex-wrap’>

        flex-flow: column wrap;

    Существует также свойство align-content, которое определяет то, каким образом образовавшиеся ряды блоков будут выровнены по вертикали и как они поделят между собой все пространство flex-контейнера. align-content работает только в многострочном режиме:

        align-content: flex-start; (ряды блоков прижаты к началу flex-контейнера)

        align-content: flex-end; (ряды блоков прижаты к концу flex-контейнера)

        align-content: center; (ряды блоков находятся в центре flex-контейнера)

        align-content: space-between; (первый ряд блоков располагается в начале flex-контейнера, последний ряд блоков блок – в конце, все остальные ряды равномерно распределены в оставшемся пространстве)

        align-content: space-around; (ряды блоков равномерно распределены в от начала до конца flex-контейнера, разделяя все свободное пространство поровну)

        align-content: stretch (значение по умолчанию, Ряды блоков растянуты, дабы занять все имеющееся пространство.)

    СSS свойства flex-wrap и align-content должны применяться непосредственно к flex-контейнеру, а не к его дочерним элементам.

    CSS правила для дочерних элементов flex-контейнера (flex-блоков):

        flex-basis – базовый размер отдельно взятого flex-блока

        flex-grow – “жадность” отдельно взятого flex-блока (Определяет то, на сколько отдельный flex-блок может быть больше соседних элементов, если это необходимо.)

        flex-shrink – фактор “сжимаемости” отдельно взятого flex-блока (Определяет, насколько flex-блок будет уменьшаться относительно соседних эдементов внутри flex-контейнера в случае недостатка свободного места.)

        flex – короткая запись для свойств flex-grow, flex-shrink и flex-basis (flex: 12 3 30em;)

        align-self – выравнивание отдельно взятого flex-блока по поперечной оси.

        order – порядок следования отдельно взятого flex-блока внутри flex-контейнера.
*/