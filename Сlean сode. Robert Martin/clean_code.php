<?php

/*
    Предисловие.

        - Мелочи важны

        - Профессионалы выделяют некоторое время на обдумывание и планироване проекта

        - Рассматривайте свой код, как красивое воплощение благородных усилий по проектированию, как процесса, а не конечной статической точки
*/

/*
    Глава 1. Чистый код.

    Более того, они - и все остальные участники группы - находятся под страшным давлением со стороны начальства. В спешке они работают все небрежнее, отчего производительность только продолжает падать.

    Но постойте! - скажете вы. Если я не сделаю то, что говорит мой начальник, меня уволят. Скорее всего нет. Обычно начальники хотят знать правду, даже если по их поведению этого не скажешь. Они могут страстно защищать график и требования, но это их работа. А ваша работа - так же страстно защищать код.

    Единственный способ выдержать график и работать быстро - постоянно поддерживать чистоту в коде.

    Суть в том, что чистый код уделяет пристальное внимание мелочам.

    Не язык делает программы простыми. Программа выглядит простой благодаря работе программиста.

    Когда вы в следующий раз напишите строку кода, вспомните, что вы - автор, и пишите для читателей, которые будут оценивать плоды вашей работы.

    Соотношение времени чтения и написания кода превышает 10:1, поэтому наш код должен легко читаться, даже если это затрудняет его написание.

    Хорошо написать код недостаточно. Нобходимо поддерживать чистоту кода с течением времени. "Оставь место стоянки чище, чем оно было до твоего прихода". Чистка не обязана быть глобальной. Можно присвоить более понятное имя переменной, разбить слишком большую функцию или устранить сложную цепочку if.
*/

/*
    Глава 2. Содержательные имена.

    Имена переменных должны передавать намерения программиста. Они должны отвечать на все главные вопросы. Например, что измеряется и в каких единицах - $days_since_creation (дни со времени создания)

    Не использовать слова со скрытыми значениями. Например $hp, aix и т.д.

    Остерегаться малозаметных различий в именах. Например XyzControllerHandlingOfString и XyzControllerStorageOfString

    Не создавать имена, которые не несут полезной иформации. Например Product, ProductInfo, ProductData. В данном примере Info и Data не несут полезной информации.

    Проблема возникает тогда, когда вы называете переменную theZork, потому что в программе уже есть другая переменная с именем zork. Пример:

        getActiveAccount()
        getActiveAccounts()
        getActiveAccountInfo()

    Как участвующему в проекте программисту понять, какую из этих функций вызывать в конкретном случае? Поэтому записывайте так, чтобы читатель кода понимал различия.

    Используйте удобопроизносимые имена. Сравним два имени:

        - private $genymdns;

        - private $generationTimestamp;

    Второе имена можно легко произнести и сразу понять что лежит в данной переменной.

    Выбирайте имена удобные для поиска. Для лёгкого поиска не желательно использовать в названии переменной числа.

    Избегайте схем кодирования имён. (например IProduct, то есть интерфейс продукта)

    Префиксы стали ненужны.

    При создании файлов интерфейска и реализации Роберт предпочитает при необходимости, кодировать реализацию Shop (интерфейс) - ShopImp (реализация), нежели интерфейс IShop (интерфейс) - Shop (реализация). Проверить возможность создания и работы двух файлов с одинаковыми названиями.

    Имена классов должны представлять из себя существительные и их комбинации, если это необходимо. Например AddressParser, Product и т.д.

    Имена методов должны быть глаголами или глагольными сочетаниями. Например: getName, save и т.д.

    Избегайте остроумия и сленга в именовании.

    Выберите одно слово для каждой концепции. Например если в разных классах есть методы fetch, get, retrieve, которые обозначают одно и то же - получать. Соответственно это несёт путаницу, поэтому выбираем одно название метода для получения чего-либо и используем его везде. При этом не следует делать это везде и бездумно. Например мы создаём новый класс, где есть фунция, которая добавляет один элемент в коллекцию. Если подумать, то данная функция не создаёт, а добавляет, поэтому её можно назвать append.

    Короткие имена лучше длинных, если только их смысл понятен читателю.
*/

/*
    Глава 3. Функции.

    Первое правило - функции должны быть компактными, второе правило - функции должны быть ещё компактней. "Мой практический опыт научил меня, что функции должны быть очень маленькими".

    "Однако каждая функция Кента занимала всего 3-4 строки". Этого можно достигнуть например с помощью вызова дополнительной функции в конструкциях if, while.

    Функции не должны содержать вложенных структур типа if, while.

    Функция должна выполнять только одну операцию и ничего другого она делать не должна. Но как быть если в функции идёт проверка входного параметра, потом вызвается другая функция и происходит третье действие? Ответ такой: если функция выполняет только те действия, которые находятся на одном уровне с именем фунции. Например в функции renderPageWithSetupsAndTeardowns мы проверяем является ли страница тестовой, и если да, то включаем начальные и конечные блоки.

    Функцию выполняющую только одну операцию, невозможно осмысленно разделить на секции. Под секциями здесь понимается разделение функции на такие операции, как (инициализирует, отбирает, объявляет и т.п.)
*/