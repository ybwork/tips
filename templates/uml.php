<?php

/*
	UML расшифровывается как "Unified Modeling Language" (унифицированный язык моделирования).
*/

/*
	Диаграммы классов - это только один аспект UML, но, вероятно, они чаще всего используются. Они позволяют описывать структуры и шаблоны, так что их смысл становится ясным и понятным.
*/

/*
	Классы - это главные составные элементы диаграмм классов. Класс представляется в виде прямоугольника с именем. Прямоугольник. представляющий класс, делится на три раздела, в первом из которых отображается имя. Разделительные линии необязательны. если, помимо имени класса, больше никакой дополнительной информации не предоставляется. Абстрактные классы представляют, либо выделяя имя класса курсивом. либо добавляя к имени класса уточнение { abstract }.
*/

/*
	Интерфейсы определяются таким же образом, как классы. за исключением того. что они должны включать стереотип «interface»
*/

/*
	Если говорить в общем. то атрибуты описывают свойства класса. Атрибуты перечисляются в разделе, который расположен непосредственно под именем класса.

	+ - public
	- - private
	# - protected
*/

/*
	Операции описывают методы или, точнее, вызовы, которые могут быть сделаны по отношению к экземпляру класса.
*/

/*
	В UML отношения наследования описываются в виде обобщений. Это отношение обозначается линией, ведущей от подкласса к родительскому классу. Эта линия заканчивается незакрашенной замкнутой стрелкой.
*/

/*
	С помощью UML описывается также связь меж.цу интерфейсом и классами, которые его реализуют. Это отношение реализуется с помощью пунктирной линии и не закрашенной стрелки
*/

/*
	Ассоциация происходит, когда объявляется, что в свойстве класса содержится ссылка на экземпляр (или экземпляры) другого класса. Если в классе Teacher существует ссылка на экземпляр класса Pupil , но не наоборот, то мы должны определить ассоциацию с помощью стрелки, направленной от класса Teacher к классу Pupil . Эта ассоциация, которая называется однонаправленной. Стрелка при этом обычная (->), без треугольника на конце. Так же бывается двунаправленная ассоциация - когда оба св-ва класса имеют ссылку/ссылки на экзэмпляры друг друга.
*/

/*
	Агрегирование и композиция похожи на ассоциацию. Все эти термины служат для описания ситуации, когда в классе содержится постоянная ссьmка на один или более экземпляров другого класса. Но с помощью агрегирования и композиции экземпляры, на которые ссылаются, формируют внутреннюю часть ссьmающегося объекта.

	В случае агрегирования содержащиеся объекты составляют основную часть объекта-контейнера (который их содержит), но они могут также одновременно содержаться и в других объектах. Отношение агрегирования обозначается линией, которая начинается с незакрашенного ромба.

	Класс состоит из учеников, н о н а один и тот же объект Pupil могут одновременно ссылаться различные экземпляры класса SchoolClass . Если бы нам понадобилось распустить школьный класс, для этого необязательно удалять ученика, который может посещать другие классы.

	Композиция представляет собой еще более сильное отношение. В композиции на содержащийся объект может ссьmаться только его объект-контейнер. И он должен быть удален при удалении объекта-контейнера. Отношения композиции изображаются так же, как и отношения агрегирования, только с закрашенным ромбом.
*/


/*
	В UML отношение использования описывается в виде зависимости. Это самое неустойчивое из всех отношений, рассматриваемых в данном разделе. потому что оно не описывает постоянную связь между классами. Используемый класс может передаваться в качестве аргумента или быть получен в результате вызова метода. Отношение использования изображается с помощью пунктирной линии со стрелкой с незамкнутым контуром на конце; эта линия соединяет рассматриваемые класс и объект. Тем не менее при этом отношении ссылка на объект не хранится в виде свойства.
*/

/*
	Примечание представляет собой прямоугольник с загнутым уголком. Обычно в нем содержатся фрагменты псевдокода.
*/

/*
	В основе диаграммы последователыюсти лежит объект. а не класс. Она используется для поэтапного моделирования процесса в системе.
*/

