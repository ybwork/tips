<?php

/*
    Глава 11. Резервное восстановление и копирование.
*/

/*
    И это все о восстановлении.

    Если нет резервной копии, то не с чего восстанавливаться, поэтому при построении системы внимание уделяют, прежде всего, резервному копированию.
*/

/*
    Миф о резервном копировании № 1: я использую репликацию как резервное копирование.

    Ничто, кроме самого резервного копирования, не способно реализовать функции резервного копирования.
*/

/*
    Общая картина.

    Для больших баз данных физическое резервное копирование совершенно необходимо: этот механизм работает быстро, что крайне важно. Лично мы предпочитаем резервные копии на основе снимков, но технология InnoDB Hot Backup – вполне приемлемая альтернатива, если вы работаете только с таблицами типа InnoDB.

    Включайте в резервную копию двоичные журналы, чтобы оставалась возможность восстановления на конкретный момент времени в прошлом.

    Сохраняйте несколько поколений резервных копий, а файлы двоичных журналов храните достаточно долго для того, чтобы из них можно было вернуть данные.

    Периодически проверяйте процедуру резервного копирования и восстановления, проходя весь процесс восстановления от начала до конца.

    Периодически создавайте логические резервные копии (возможно, из физических копий для эффективности). Следите за тем, чтобы было достаточно двоичных журналов для восстановления из последней логической копии.

    Периодически создавайте логические резервные копии (возможно, из физических копий для эффективности). Следите за тем, чтобы было достаточно двоичных журналов для восстановления из последней логической копии.

    Ведите мониторинг процесса резервного копирования и самих резервных копий независимо от тех инструментов, которые применяются для резервного копирования. Необходимо внешнее подтверждение их пригодности.
*/

/*
    Различные факты и компромиссы.

    Очень упрощая, можно сказать, что резервная копия – это просто копия данных, но из-за требований приложения, архитектуры подсистем хранения в MySQL и конфигурации вашей системы получить такую копию может оказаться совсем нелегко.

    Если останов сервера MySQL на время резервного копирования допустим, то это самый безопасный и вообще наилучший способ получить копию данных с минимальными шансами внести искажения или несогласованность. Если сервер остановлен, то информацию можно копировать, не заботясь о таких неприятностях, как «грязные» буферы в пуле буферов InnoDB или в других кэшах. Не нужно беспокоиться о том, что данные модифицируются в процессе резервного копирования, а поскольку сервер не испытывает никакой нагрузки со стороны приложения, то копирование происходит быстрее.

    Однако вывод сервера из эксплуатации обходится дороже, чем может показаться. Даже если удается свести к минимуму само время простоя, останов и запуск MySQL могут занять довольно много времени, если нагрузка и объем данных велики.
*/

/*
    Примеры копирования.

    Использовать:

        Например, один из наиболее часто упоминаемых методов резервного копирования начинается с выполнения команды FLUSH TABLES WITH READ LOCK. Тем самым мы говорим MySQL, чтобы он сбросил и заблокировал= все таблицы, а также опустошил кэш запросов. На это требуется время: сколько конкретно, предсказать невозможно; оно окажется большим, если для получения глобальной блокировки чтения придется ждать завершения выполнения длительной команды или если количество таблиц велико. Пока блокировки не будут освобождены, изменение данных на сервере невозможно. Команда FLUSH TABLES WITH READ LOCK обходится не так дорого, как останов сервера, потому что большая часть данных остается кэшированной в памяти, и сервер «прогрет», но все равно она мешает нормальной работе.

        В современных версиях MySQL реализовать оперативное резервное копирование без прерывания обслуживания затруднительно.
*/

/*
    Способы резервного копирования.

        - логическое (такая копия называется также «дампом»)

            Это очень полезно, когда требуется вернуть информацию или просто просмотреть ее глазами.

            Из них легко восстанавливать данные. Достаточно просто подать файл по конвейеру на вход программы mysql или воспользоваться программой mysqlimport.

            Резервное копирование и возврат данных можно выполнять по сети, то есть не на той же машине, где работает сервер MySQL.

            Процедуру можно очень гибко настраивать, потому что mysqldump – инструмент, которым многие предпочитают пользоваться для снятия логических копий, – принимает множество параметров, например фразу WHERE, позволяющую указать, какие строки включать в резервную копию.

            Они не зависят от подсистемы хранения. Поскольку для создания логической копии данные запрашиваются у сервера MySQL, то различия между подсистемами хранения нивелируются. Следовательно, очень просто снять копию таблицы типа InnoDB и восстановить ее в таблицу типа MyISAM. С физическими резервными копиями такой фокус не пройдет.

            Для их генерации требуется работа сервера, так что процессор загружается сильнее.

        - физическое

            Для получения физической копии нужно просто скопировать требуемые файлы в другое место. Никакой дополнительной работы для их генерации выполнять не придется.

            Физические копии можно переносить между платформами, операционными системами и версиями MySQL.

            Восстановление с физических копий может оказаться быстрее, потому что серверу не нужно выполнять SQL-команды и строить индексы. При наличии таблиц InnoDB, которые не помещаются целиком в память сервера, восстановление данных из физических файлов может быть гораздо быстрее.

            Объем физических файлов InnoDB, как правило, гораздо больше соответствующих логических копий.

            Не всегда физическую копию можно перенести на другую платформу, операционную систему или версию MySQL. В частности, препятствием может стать чувствительность к регистру букв и формат чисел с плавающей точкой.

    Использовать:

        Работать с физическими копиями обычно проще и эффективнее. Но не следует полностью полагаться на них для долговременного хранения или удовлетворения требований законодательства; время от времени следует делать и логические копии.

        Не считайте резервную копию (особенно физическую) пригодной для использования, пока не проверили ее. В случае InnoDB это означает, что нужно запустить экземпляр MySQL, дать InnoDB завершить процедуру восстановления, а затем выполнить команду CHECK TABLES.
*/

/*
    Что копировать?

        - Неочевидные данные (Не забудьте о данных, которые не бросаются в глаза, например: двоичные журналы и журналы транзакций InnoDB.)

        - Код

        - Конфигурация репликации (Для восстановления сервера, участвующего в репликации, следует включать в резервную копию все необходимые для репликации файлы: двоичные журналы, журналы ретрансляции, индексные файлы журналов и info-файлы. Как минимум, следует добавить результаты выполнения команды SHOW MASTER STATUS и/или SHOW SLAVE STATUS.)

        - Конфигурация сервера

        - Отдельные файлы операционной системы (важно сохранить все внешние конфигурационные файлы, существенные для работы операционной системы. На UNIX-сервере это могут быть таблицы cron, конфигурация пользователей и групп, административные сценарии и правила sudo.)
*/

/*
    Инкрементное резервное копирование.

    При наличии большого объема данных общепринятой стратегией является регулярное инкрементное копирование.

    Делайте резервную копию двоичных журналов.

    Не копируйте таблицы, которые не изменялись. Некоторые подсистемы хранения, например MyISAM, записывают время последней модификации каждой таблицы. Узнать это время можно, заглянув в файл на диске или воспользовавшись командой SHOW TABLE STATUS. При использовании InnoDB можно написать триггер, который поможет отследить время последнего изменения, занося его в специальную маленькую таблицу. Но это нужно делать только для таблиц, которые изменяются редко, чтобы накладные расходы были минимальны.

    Справочные таблицы, например содержащие названия месяцев на разных языках или сокращенные названия государств или регионов, имеет смысл поместить в отдельную базу данных, которая не копируется каждый раз.

    Не копируйте строки, которые не изменялись. Если записи в таблицу только добавляются (командой INSERT), как, например, в таблицу, где хранится протокол посещения страниц веб-сайта, то можно включить в нее столбец типа TIMESTAMP и включать в резервную копию только строки, добавленные с момента последнего копирования.

    Включайте в резервную копию только изменения в двоичном журнале. Чтобы вычислить разницу между двоичными журналами, можно воспользоваться программой rdiff и помещать только изменения с момента снятия последней копии (но при этом периодически делайте полные резервные копии). Еще один полезный инструмент, которым мы часто пользуемся, – программа rdiffbackup, которая объединяет функциональность rdiff и rsync для формирования законченного решения по резервному копированию. Или можете просто выполнять после снятия каждой копии команду FLUSH LOGS, чтобы начать новый журнал; тогда вычислять двоичные дельты вообще не понадобится.

    Включайте в резервную копию только изменения в файлах данных. Этот совет аналогичен предыдущему. Для данной цели в UNIX применяются все те же программы rdiff и rdiffbackup. Такая стратегия особенно полезна при работе с очень большими базами, которые изменяются несильно.

    Недостаток инкрементного резервного копирования – повышенная сложность восстановления. Так что, если имеется возможность снимать полные резервные копии, то из соображений простоты мы рекомендуем ей воспользоваться.
*/

/*
    Согласованность данных.

    При снятии резервной копии необходимо гарантировать, что данные в копии согласованы по времени. Например, в базе данных сайта электронной торговли счета-фактуры и платежи должны быть согласованы друг с другом.

    Согласованную логическую копию таблиц InnoDB позволяет также программа mysqldump, которая поддерживает флаг --singletransaction, делающий в точности то, что было описано выше. Однако при этом могут возникать очень длинные транзакции, что при некоторых характеристиках рабочей нагрузки приводит к неприемлемо высоким издержкам.

    Помочь в резервном копировании групп взаимосвязанных таблиц могут инструменты, поддерживающие «групповое резервное копирование», например ZRM, или mkparallel-dump, входящий в комплект Maatkit.
*/