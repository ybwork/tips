<?php

/*
	Паттерны работы с базой данных:

		- ActiveRecord

		- DataMapper

		- TableDataGateway

		- Doctrine
*/

/*
	Данные паттерны предполагают создание класса-сущности (entity), который представляет собой одну запись в таблице. Например, для работы с таблицей новостей мы можем создать сущность News, представляющую собой одну новость:
*/
class News
{
    public $id;
    public $title;
    public $text;
    public $categId;
    public $date;
    
    public function getAgeDays()
    {
        $today = new DateTime();
        $interval = $today->diff($this->date);
        return $interval->d;
    }
}

/*
	Код, реализующий загрузку и сохранение сущностей в SQL базу данных еще называется ORM (Object-Relational Mapper).
*/

/*
	ORM — прослойка между базой данных и кодом который пишет программист, которая позволяет созданые в программе объекты складывать или получать их бд. Все просто! Создаем объект и кладем в бд. Нужен этот же объект? Возьми из бд! Гениально! НО! Программисты забывают о первой буковке абравиатуры и пхнут в одну и ту же табличку все! Начиная от свойств объектов, что логично, и, заканчивая foreign key, что никакого отношения к объекту не имеет! 

	ORM пытаются избавить нас от необходимости писать однотипные примитивные SQL запросы, позволяя нам работать на более высоком уровне.

	Однако шаг вправо, шаг влево — и гораздо удобнее пользоваться нативным SQL. Например, сложные выборки/обновления. Примеры:

		- Laravel

			$books = \App\Book::all();

			foreach ($books as $book) {
		        print $book->name . "\n";
		        foreach ($book->authors as $author) {
		            print $author->name . ";";
		        }
		    }

		    Код выше делает аж 4 запроса + select * и select authors.*. Для маленького ненагруженного сайта сойдет и так. Но если сайт нагружен и таблицы содержат много строк и данных, то это провал. (полное сравнение в этой статье - https://habrahabr.ru/company/pgdayrussia/blog/328690/)
*/